{
    "contents" : "#' @export\nprep.sims <- function( sim.function, param.matrix, \n                       num.reps=10, sim.directory='sim_directory'){\n\n\tnum.sims <- dim(param.matrix)[1]\n\n\t# create the sim_directory if necessary\n\tif( !file.exists(sim.directory) ){ \n \t\tdir.create(sim.directory)\n\t  dir.create(paste(sim.directory,'/InputFiles', sep=''))\n\t  dir.create(paste(sim.directory,'/OutputFiles',sep=''))\n\t}\n\n\t# I should figure out how to grab the global envirnment, add \n\t# a link to the sim.function and param.matrix and save the \n\t# whole she-bang\n\tSim.Env <- globalenv()\n\tSim.Env$Sim.Function <- sim.function\n\tfor( i in 1:num.sims ){\n\t  Sim.Env$Params  <- param.matrix[i,]\n\t  for(j in 1:num.reps){\n\t    Sim.Env$Output.File <- paste(sim.directory,'/OutputFiles/sim',i,'rep',j,'.RData',sep='')\n\t    save(list  = ls(all.names=TRUE, envir=Sim.Env),\n\t         file  = paste(sim.directory,'/InputFiles','/sim',i,'rep',j,'.RData',sep=''),\n\t         envir = Sim.Env )\n\t  }\n\t}\n\t\n\t# Generate a file that contains one command for each file\n\tfile.create(paste(sim.directory,'/CommandFile.txt',sep=''))\n\tCommandFile <- file(paste(sim.directory,'/CommandFile.txt',sep=''), open='a' )\n\tscript <- system.file('AnalyzeOneFile.R', package='Simulations2')\n\tfor(i in 1:num.sims){\n\t  for(j in 1:num.reps){\n\t    input.file <- paste(sim.directory,'/InputFiles','/sim',i,'rep',j,'.RData',sep='')\n\t    writeLines(paste('Rscript ', script, ' ', input.file), CommandFile)\n\t  }\n\t}\n\tclose(CommandFile)\n} \n\n#' @export\nrun.sims <- function(sim.directory){\n  files <- list.files(paste(sim.directory,'/InputFiles',sep=''))\n  script <- system.file('AnalyzeOneFile.R', package='Simulations2')\n  foreach(file = files) %dopar% {\n    foo <- system( paste('Rscript ', script, ' ', sim.directory,'/InputFiles/',file, sep='') ) \n  }\n  return(invisible(TRUE))\n}\n\n\n  \n\n#' Summarize a simulation study \n#' \n#' Summarize a simulation study where we have a matrix\n#' of parameter values that we are interested. \n#' \n#' @param summary.function A function to summarize a single\n#' simulation into a vector of output statistics.\n#' @param params A data frame of parameter values. This should\n#' be the same data frame as was used to create the simulation.\n#' @param sim.directory The local directory to store the simulation\n#' results.\n#' @examples \n#' # Simulation is creating data and fitting \n#' # a regression model to estimate a slope.\n#' Sim.Function <- function(N, alpha, beta, sigma){\n#'   x <- runif(N, 0, 10)\n#'   y <- alpha + beta*x + rnorm(N, 0, sigma)\n#'   model <- lm(y~x)\n#'   return(model)\n#' }\n#' \n#' # Create a matrix where each row represents a set of parameters\n#' Params <- expand.grid(N=20, alpha=0, beta=c(0,1), sigma=c(.2, 1))\n#' \n#' # Run the simulations.  \n#' run.sims(Sim.Function, Params, num.reps=10)\n#'\n#' # Now that the simulations are run, we want to analyze\n#' # them.  Create a function to be applied to each simulation\n#' # that results in a single row.  Those rows will be concatenated\n#' # together into a large data frame that summarizes the simulation.\n#' \n#' # Because the output of the Sim.Function was a linear model output,\n#' # that is the input for this function\n#' Summary.Function <- function(model, params){\n#'   beta.hat <- coef(model)[2]\n#'   beta.lwr <- confint(model)[2,1]\n#'   beta.upr <- confint(model)[2,2]\n#'   return( data.frame(beta=beta.hat, lwr=beta.lwr, upr=beta.upr))\n#' }\n#' \n#' Sims <- summarize.sims(Summary.Function, Params)\n#' @export\nsummarize.sims <- function( summary.function, \n                            Params, sim.directory='./sim_directory', ...){\n\n  files <- as.character( dir(path=sim.directory) )\n\tfiles <- data.frame(file = files,\n\t                    sim = get.sim.number(files),\n\t                    rep = get.rep.number(files))\n\tfiles <- files %>% arrange(sim, rep)\n\t\n\tout <- list()\n\tfor(k in 1:nrow(files)){\n\t  i <- files$sim[k]\n\t  j <- files$rep[k]\n\t\tload(paste(sim.directory,'/sim',i,'rep',j,'.RData', sep=''))\n\t\ttemp1 <- summary.function(sim)\n\t\ttemp2 <- cbind( do.call(rbind, replicate(nrow(temp1), Params[i,], simplify = FALSE)),\n\t\t                 temp1 )\n\t\tout[[k]] <- temp2  \n\t}\n\treturn( rbind_all(out) )\n}\n\n\n\nget.sim.number <- Vectorize(function( file ){\n\ttemp <- strsplit(file, 'sim')\n\ttemp <- strsplit(temp[[1]][2], 'rep')\n\tsim <- as.integer(temp[[1]][1])\n\tnames(sim) <- NULL\n\treturn(sim)\n}, USE.NAMES=FALSE)\n\nget.rep.number <- Vectorize(function( file ){\n\ttemp <- strsplit(file, 'rep')\n\ttemp <- strsplit(temp[[1]][2], '.RData')\n\trep <- as.integer(temp[[1]][1])\n\treturn(rep)\n}, USE.NAMES=FALSE)\n\t\t\n",
    "created" : 1440021027454.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3051594884",
    "id" : "25F65748",
    "lastKnownWriteTime" : 1440045478,
    "path" : "~/Dropbox/NAU/GitHub/Simulations2/R/Simulations.R",
    "project_path" : "R/Simulations.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}